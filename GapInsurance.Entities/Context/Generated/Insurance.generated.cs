//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
//
//     Produced by Entity Framework Visual Editor
//     https://github.com/msawczyn/EFDesigner
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

namespace GapInsurance.Entities
{
   /// <inheritdoc/>
   public partial class Insurance : Microsoft.EntityFrameworkCore.DbContext
   {
      #region DbSets
      public Microsoft.EntityFrameworkCore.DbSet<GapInsurance.Entities.Policy> Policies { get; set; }
      public Microsoft.EntityFrameworkCore.DbSet<GapInsurance.Entities.PolicyType> PolicyTypes { get; set; }
      public Microsoft.EntityFrameworkCore.DbSet<GapInsurance.Entities.Type> Types { get; set; }
      #endregion DbSets

      /// <summary>
      /// Default connection string
      /// </summary>
      public static string ConnectionString { get; set; } = @"Name=InsuranceConnection";

      /// <inheritdoc />
      public Insurance() : base()
      {
      }

      /// <inheritdoc />
      public Insurance(DbContextOptions<Insurance> options) : base(options)
      {
      }

      partial void CustomInit(DbContextOptionsBuilder optionsBuilder);

      /// <inheritdoc />
      protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
      {
         CustomInit(optionsBuilder);
      }

      partial void OnModelCreatingImpl(ModelBuilder modelBuilder);
      partial void OnModelCreatedImpl(ModelBuilder modelBuilder);

      /// <inheritdoc />
      protected override void OnModelCreating(ModelBuilder modelBuilder)
      {
         base.OnModelCreating(modelBuilder);
         OnModelCreatingImpl(modelBuilder);

         modelBuilder.HasDefaultSchema("dbo");

         modelBuilder.Entity<GapInsurance.Entities.Policy>()
                     .ToTable("Policies")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<GapInsurance.Entities.Policy>()
                     .Property(t => t.Id)
                     .IsRequired();
         modelBuilder.Entity<GapInsurance.Entities.Policy>()
                     .Property(t => t.Name)
                     .HasMaxLength(20)
                     .IsRequired();
         modelBuilder.Entity<GapInsurance.Entities.Policy>()
                     .Property(t => t.Description)
                     .HasMaxLength(200)
                     .IsRequired();
         modelBuilder.Entity<GapInsurance.Entities.Policy>()
                     .Property(t => t.StartDate)
                     .IsRequired();
         modelBuilder.Entity<GapInsurance.Entities.Policy>()
                     .Property(t => t.DurationMonths)
                     .IsRequired();
         modelBuilder.Entity<GapInsurance.Entities.Policy>()
                     .Property(t => t.Price)
                     .IsRequired()
                     .HasColumnType("Decimal(18,2)");
         modelBuilder.Entity<GapInsurance.Entities.Policy>()
                     .Property(t => t.Risk)
                     .IsRequired();
         modelBuilder.Entity<GapInsurance.Entities.Policy>()
                     .Property(t => t.User)
                     .HasMaxLength(20)
                     .IsRequired();
         modelBuilder.Entity<GapInsurance.Entities.Policy>()
                     .HasMany(x => x.PolicyTypes)
                     .WithOne()
                     .IsRequired();

         modelBuilder.Entity<GapInsurance.Entities.PolicyType>()
                     .ToTable("PolicyTypes")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<GapInsurance.Entities.PolicyType>()
                     .Property(t => t.Id)
                     .IsRequired();
         modelBuilder.Entity<GapInsurance.Entities.PolicyType>()
                     .Property(t => t.Comment)
                     .HasMaxLength(100)
                     .IsRequired();
         modelBuilder.Entity<GapInsurance.Entities.PolicyType>()
                     .Property(t => t.Coverage)
                     .IsRequired()
                     .HasColumnType("Decimal(5,2)");

         modelBuilder.Entity<GapInsurance.Entities.Type>()
                     .ToTable("Types")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<GapInsurance.Entities.Type>()
                     .Property(t => t.Id)
                     .IsRequired();
         modelBuilder.Entity<GapInsurance.Entities.Type>()
                     .Property(t => t.Name)
                     .HasMaxLength(20)
                     .IsRequired();
         modelBuilder.Entity<GapInsurance.Entities.Type>()
                     .Property(t => t.Code)
                     .HasMaxLength(3)
                     .IsRequired();
         modelBuilder.Entity<GapInsurance.Entities.Type>()
                     .HasMany(x => x.PolicyTypes)
                     .WithOne()
                     .IsRequired();

         OnModelCreatedImpl(modelBuilder);
      }
   }
}
